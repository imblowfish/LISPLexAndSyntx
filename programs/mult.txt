(defun intersect (x y);пересечение
  (cond
   ((null x) nil)
   ((member (car x) y) (cons (car x) (intersect (cdr x) y)))
   (T (intersect (cdr x) y))))
(write-line(concatenate 'string "1 = " (write-to-string '(1 5 3 8 2))))
(write-line(concatenate 'string "2 = " (write-to-string '(1 5 3 8 2))))
(write-line(concatenate 'string "intersect = " (write-to-string (intersect '(1 5 3 8 2) '(1 3 0 11 24)))))

(defun task (lst1 lst2);вычитание
  (cond ((null lst1) nil)
        ((not (member (car lst1) lst2)) (cons (car lst1) (task (cdr lst1) lst2)))
        (t (task (cdr lst1) lst2))))
(write-line(concatenate 'string "1 = " (write-to-string '(1 2 3 4 5))))
(write-line(concatenate 'string "2 = " (write-to-string '(1 2 3 4))))
(write-line(concatenate 'string "task = " (write-to-string (task '(1 2 3 4 5) '(1 2 3 4)))))

(defun unionset (set1 set2);объединение
  (cond ((null set1) set2)
        ((null set2) set1)
        ((member (car set1) set2) (cons (car set1) (unionset (cdr set1) (remove (car set1) set2))))
        (t (cons (car set1) (unionset (cdr set1) set2)))))
(write-line(concatenate 'string "1 = " (write-to-string '(1 2 3 4 5))))
(write-line(concatenate 'string "2 = " (write-to-string '( 3 4 5 6 7))))
(write-line(concatenate 'string "union = " (write-to-string (unionset '(1 2 3 4 5) '( 3 4 5 6 7)))))